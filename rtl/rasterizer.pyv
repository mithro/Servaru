`timescale 1ns / 1ps
`include "defines.v"
`default_nettype none
<% from manjuu import * %>
//
// Servaru
// Copyright 2023 Wenting Zhang
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// The main logic is adapted from ChiselGPU (https://github.com/jbush001/ChiselGPU)
// Copyright 2015 Jeff Bush
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
module rasterizer(
    input wire clk,
    input wire rst,
    <% gen_port("in", handshake(ras_req_t)) %>
    <% gen_port("out", reverse(handshake(ras_resp_t)), last_comma=False) %>
);

    localparam STEP_NONE = 2'd0;
    localparam STEP_RIGHT = 2'd1;
    localparam STEP_DOWN = 2'd2;
    localparam STEP_LEFT = 2'd3;

    localparam ST_SCAN_RIGHT_FOR_LEFT_EDGE = 3'd0;
    localparam ST_SWEEP_RIGHT = 3'd1;
    localparam ST_STEPPED_RIGHT_DOWN = 3'd2;
    localparam ST_SCAN_LEFT_FOR_RIGHT_EDGE = 3'd3;
    localparam ST_SCAN_RIGHT_FOR_RIGHT_EDGE = 3'd4;
    localparam ST_SWEEP_LEFT = 3'd5;
    localparam ST_STEPPED_LEFT_DOWN = 3'd6;
    localparam ST_SCAN_LEFT_FOR_LEFT_EDGE = 3'd7;

    localparam COND_OUTSIDE = 2'd0;
    localparam COND_INSIDE = 2'd1;
    localparam COND_LEFT_EDGE = 2'd2;
    localparam COND_RIGHT_EDGE = 3'd3;

    // In extreme case, value as large as X_RES ^ 2 + Y_RES ^ 2 could be stored
    // into edge variables. Extend one bit to accomodate signed
    // 28 bit is enough for 8K x 8K

    // Sequential signals
    <% gen_reg("cur", ras_req_t) %>
    reg [12:0] cur_x;
    reg [12:0] cur_y;
    reg [1:0] state;

    reg active;

    // Combinational signals
    reg inside_tri;
    reg [1:0] cond;
    reg [1:0] step_dir;
    reg pixel_valid;
    reg [2:0] next_state;

    always @(*) begin
        inside_tri = ($signed(edge0) >= 0) && ($signed(edge1) >= 0) && ($signed(edge2) >= 0);
        
        if (inside_tri)
            cond = COND_INSIDE;
        else if (cur_x == cur_left_edge)
            cond = COND_LEFT_EDGE;
        else if (cur_x == cur_right_edge)
            cond = COND_RIGHT_EDGE;
        else
            cond = COND_OUTSIDE;

        case(state)
        ST_SCAN_RIGHT_FOR_LEFT_EDGE:
            case (cond)
            COND_OUTSIDE:     begin step_dir = STEP_RIGHT;  pixel_valid = false; next_state = ST_SCAN_RIGHT_FOR_LEFT_EDGE; end
            COND_INSIDE:      begin step_dir = STEP_RIGHT;  pixel_valid = true;  next_state = ST_SWEEP_RIGHT; end
            COND_LEFT_EDGE:   begin step_dir = STEP_RIGHT;  pixel_valid = true;  next_state = ST_SCAN_RIGHT_FOR_LEFT_EDGE; end
            COND_RIGHT_EDGE:  begin step_dir = STEP_DOWN;   pixel_valid = false; next_state = ST_STEPPED_RIGHT_DOWN; end
            endcase
        ST_SWEEP_RIGHT:
            case (cond)
            COND_OUTSIDE:     begin step_dir = STEP_DOWN;   pixel_valid = false; next_state = ST_STEPPED_RIGHT_DOWN; end
            COND_INSIDE:      begin step_dir = STEP_RIGHT;  pixel_valid = true;  next_state = ST_SWEEP_RIGHT; end
            COND_LEFT_EDGE:   begin step_dir = STEP_RIGHT;  pixel_valid = true;  next_state = ST_SWEEP_RIGHT; end
            COND_RIGHT_EDGE:  begin step_dir = STEP_DOWN;   pixel_valid = false; next_state = ST_STEPPED_RIGHT_DOWN; end
            endcase
        ST_STEPPED_RIGHT_DOWN:
            case (cond)
            COND_OUTSIDE:     begin step_dir = STEP_LEFT;   pixel_valid = false; next_state = ST_SCAN_LEFT_FOR_RIGHT_EDGE; end
            COND_INSIDE:      begin step_dir = STEP_RIGHT;  pixel_valid = false; next_state = ST_SCAN_RIGHT_FOR_RIGHT_EDGE; end
            COND_LEFT_EDGE:   begin $error("Invalid state"); end
            COND_RIGHT_EDGE:  begin step_dir = STEP_LEFT;   pixel_valid = false; next_state = ST_SCAN_LEFT_FOR_RIGHT_EDGE; end
            endcase
        ST_SCAN_LEFT_FOR_RIGHT_EDGE:
            case (cond)
            COND_OUTSIDE:     begin step_dir = STEP_LEFT;   pixel_valid = false; next_state = ST_SCAN_LEFT_FOR_RIGHT_EDGE; end
            COND_INSIDE:      begin step_dir = STEP_LEFT;   pixel_valid = true;  next_state = ST_SWEEP_LEFT; end
            COND_LEFT_EDGE:   begin step_dir = STEP_RIGHT;  pixel_valid = false; next_state = ST_SCAN_RIGHT_FOR_LEFT_EDGE; end
            COND_RIGHT_EDGE:  begin $error("Invalid state"); end
            endcase
        ST_SCAN_RIGHT_FOR_RIGHT_EDGE:
            case (cond)
            COND_OUTSIDE:     begin step_dir = STEP_LEFT;   pixel_valid = false; next_state = ST_SWEEP_LEFT; end
            COND_INSIDE:      begin step_dir = STEP_RIGHT;  pixel_valid = false; next_state = ST_SCAN_RIGHT_FOR_RIGHT_EDGE; end
            COND_LEFT_EDGE:   begin $error("Invalid state"); end
            COND_RIGHT_EDGE:  begin step_dir = STEP_LEFT;   pixel_valid = true;  next_state = ST_SWEEP_LEFT; end
            endcase
        ST_SWEEP_LEFT:
            case (cond)
            COND_OUTSIDE:     begin step_dir = STEP_DOWN;   pixel_valid = false; next_state = ST_STEPPED_LEFT_DOWN; end
            COND_INSIDE:      begin step_dir = STEP_LEFT;   pixel_valid = true;  next_state = ST_SWEEP_LEFT; end
            COND_LEFT_EDGE:   begin step_dir = STEP_DOWN;   pixel_valid = true;  next_state = ST_STEPPED_LEFT_DOWN; end
            COND_RIGHT_EDGE:  begin step_dir = STEP_LEFT;   pixel_valid = true;  next_state = ST_SWEEP_LEFT; end
            endcase
        ST_STEPPED_LEFT_DOWN:
            case (cond)
            COND_OUTSIDE:     begin step_dir = STEP_RIGHT;  pixel_valid = false; next_state = ST_SCAN_RIGHT_FOR_LEFT_EDGE; end
            COND_INSIDE:      begin step_dir = STEP_LEFT;   pixel_valid = false; next_state = ST_SCAN_LEFT_FOR_LEFT_EDGE; end
            COND_LEFT_EDGE:   begin step_dir = STEP_RIGHT;  pixel_valid = false; next_state = ST_SCAN_RIGHT_FOR_LEFT_EDGE; end
            COND_RIGHT_EDGE:  begin $error("Invalid state"); end
            endcase
        ST_SCAN_LEFT_FOR_LEFT_EDGE:
            case (cond)
            COND_OUTSIDE:     begin step_dir = STEP_RIGHT;  pixel_valid = false; next_state = ST_SWEEP_RIGHT; end
            COND_INSIDE:      begin step_dir = STEP_LEFT;   pixel_valid = false; next_state = ST_SCAN_LEFT_FOR_LEFT_EDGE; end
            COND_LEFT_EDGE:   begin step_dir = STEP_RIGHT;  pixel_valid = true;  next_state = ST_SCAN_RIGHT_FOR_LEFT_EDGE; end
            COND_RIGHT_EDGE:  begin step_dir = STEP_LEFT;   pixel_valid = false; next_state = ST_SCAN_LEFT_FOR_LEFT_EDGE; end
            endcase
        endcase
    end

    wire last_nack = out_valid && !out_ready;

    always @(posedge clk) begin
        if (!active) begin
            if (in_valid) begin
                <% gen_capture("cur", ras_req_t, "in") %>
                cur_x <= cur_left_edge;
                cur_y <= cur_upper_edge;
                state <= ST_SCAN_RIGHT_FOR_LEFT_EDGE;
                active <= 1'b1;
            end
            out_valid <= 1'b0;
        end
        else if (!last_nack) begin
            // Rasterizer active and not stalled
            // Update states
            case (step_dir)
            STEP_DOWN: begin
                edge0 <= edge0 + step0_y;
                edge1 <= edge1 + step1_y;
                edge2 <= edge2 + step2_y;
                y <= y + 1;
            end
            STEP_LEFT: begin
                edge0 <= edge0 - step0_x;
                edge1 <= edge1 - step1_x;
                edge2 <= edge2 - step2_x;
                x <= x - 1;
            end
            STEP_RIGHT: begin
                edge0 <= edge0 + step0_x;
                edge1 <= edge1 + step1_x;
                edge2 <= edge2 + step2_x;
                x <= x + 1;
            end
            endcase
            state <= next_state;
            // Update output
            out_x <= cur_x;
            out_y <= cur_y;
            out_valid <= pixel_valid;
            // End condition
            if (cur_y == cur_lower_edge)
                active <= 1'b0;
        end

        if (rst) begin
            active <= 1'b0;
            out_valid <= 1'b0;
        end
    end

    assign in_ready = !active;

endmodule
